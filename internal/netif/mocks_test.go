// Code generated by MockGen. DO NOT EDIT.
// Source: internal/netif/netif.go
//
// Generated by this command:
//
//	mockgen -source internal/netif/netif.go -destination internal/netif/mocks_test.go -package netif
//

// Package netif is a generated GoMock package.
package netif

import (
	reflect "reflect"

	netlink "github.com/vishvananda/netlink"
	gomock "go.uber.org/mock/gomock"
)

// MockHandle is a mock of Handle interface.
type MockHandle struct {
	ctrl     *gomock.Controller
	recorder *MockHandleMockRecorder
}

// MockHandleMockRecorder is the mock recorder for MockHandle.
type MockHandleMockRecorder struct {
	mock *MockHandle
}

// NewMockHandle creates a new mock instance.
func NewMockHandle(ctrl *gomock.Controller) *MockHandle {
	mock := &MockHandle{ctrl: ctrl}
	mock.recorder = &MockHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandle) EXPECT() *MockHandleMockRecorder {
	return m.recorder
}

// AddrAdd mocks base method.
func (m *MockHandle) AddrAdd(link netlink.Link, addr *netlink.Addr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrAdd", link, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddrAdd indicates an expected call of AddrAdd.
func (mr *MockHandleMockRecorder) AddrAdd(link, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrAdd", reflect.TypeOf((*MockHandle)(nil).AddrAdd), link, addr)
}

// AddrDel mocks base method.
func (m *MockHandle) AddrDel(link netlink.Link, addr *netlink.Addr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrDel", link, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddrDel indicates an expected call of AddrDel.
func (mr *MockHandleMockRecorder) AddrDel(link, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrDel", reflect.TypeOf((*MockHandle)(nil).AddrDel), link, addr)
}

// LinkAdd mocks base method.
func (m *MockHandle) LinkAdd(arg0 netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkAdd", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkAdd indicates an expected call of LinkAdd.
func (mr *MockHandleMockRecorder) LinkAdd(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkAdd", reflect.TypeOf((*MockHandle)(nil).LinkAdd), arg0)
}

// LinkByName mocks base method.
func (m *MockHandle) LinkByName(name string) (netlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkByName", name)
	ret0, _ := ret[0].(netlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkByName indicates an expected call of LinkByName.
func (mr *MockHandleMockRecorder) LinkByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkByName", reflect.TypeOf((*MockHandle)(nil).LinkByName), name)
}

// LinkDel mocks base method.
func (m *MockHandle) LinkDel(arg0 netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkDel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkDel indicates an expected call of LinkDel.
func (mr *MockHandleMockRecorder) LinkDel(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkDel", reflect.TypeOf((*MockHandle)(nil).LinkDel), arg0)
}

// LinkSetUp mocks base method.
func (m *MockHandle) LinkSetUp(arg0 netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkSetUp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkSetUp indicates an expected call of LinkSetUp.
func (mr *MockHandleMockRecorder) LinkSetUp(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkSetUp", reflect.TypeOf((*MockHandle)(nil).LinkSetUp), arg0)
}

// RouteAdd mocks base method.
func (m *MockHandle) RouteAdd(route *netlink.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteAdd", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteAdd indicates an expected call of RouteAdd.
func (mr *MockHandleMockRecorder) RouteAdd(route any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteAdd", reflect.TypeOf((*MockHandle)(nil).RouteAdd), route)
}

// RouteDel mocks base method.
func (m *MockHandle) RouteDel(route *netlink.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteDel", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteDel indicates an expected call of RouteDel.
func (mr *MockHandleMockRecorder) RouteDel(route any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteDel", reflect.TypeOf((*MockHandle)(nil).RouteDel), route)
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CleanupDevice mocks base method.
func (m *MockManager) CleanupDevice() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupDevice")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupDevice indicates an expected call of CleanupDevice.
func (mr *MockManagerMockRecorder) CleanupDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupDevice", reflect.TypeOf((*MockManager)(nil).CleanupDevice))
}

// EnsureIPAddress mocks base method.
func (m *MockManager) EnsureIPAddress() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureIPAddress")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureIPAddress indicates an expected call of EnsureIPAddress.
func (mr *MockManagerMockRecorder) EnsureIPAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureIPAddress", reflect.TypeOf((*MockManager)(nil).EnsureIPAddress))
}

// RemoveIPAddress mocks base method.
func (m *MockManager) RemoveIPAddress() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIPAddress")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveIPAddress indicates an expected call of RemoveIPAddress.
func (mr *MockManagerMockRecorder) RemoveIPAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIPAddress", reflect.TypeOf((*MockManager)(nil).RemoveIPAddress))
}
